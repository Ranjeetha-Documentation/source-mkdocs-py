{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RDK Resources","text":""},{"location":"architecture/architecture/","title":"Architecture","text":"<p>RDK Video Architecture is designed to enable service providers and device manufacturers to develop and deploy innovative video applications, services, and user experiences. It consists of several key components that work together seamlessly to provide a robust video platform.</p> <p>By leveraging the pluggable architecture of RDK, a variety of target device profiles can be supported, ranging from a basic IP streaming-only STB to a full-fledged RDK TV.\u00a0</p> <ul> <li>RDK-V IP STB     \u00a0     provides a common method to manage video playback functions. The IP client device serves as an interface and receives video content from an in-home media gateway device or from an external media server. It will have only IP based data streaming without any display of its own Tuner capabilities.</li> <li>RDK-V Hybrid STB     \u00a0     is an IP STB device along with capabilities such as tuning, conditional access, and stream management with which we can manage complex video functions .</li> <li>RDK-V IP TV     \u00a0     is a smart TV profile powered by RDK Video stack that brings all your favorite apps, live channels, and On Demand contents together in one place.</li> <li>RDK Hybrid TV is a combination of     \u00a0     RDK TV     \u00a0     plus     \u00a0     Hybrid     \u00a0     capabilities     \u00a0     such as tuning, conditional access etc.</li> </ul>"},{"location":"architecture/architecture/#evolution-of-rdk","title":"Evolution of RDK","text":"<p>From RDK6, RDK shifted from quarterly to annual release cycles, prioritizing quality through meticulous planning and comprehensive certification for improved user experience. This annual RDK Video release aims to synchronize RDK-V with standard industry release practices while comprehensively addressing shared challenges within the community. This approach facilitates the smoother and more consistent adoption of newly contributed features, utilizing the latest releases from technology partners. By aligning with SoC partners, the release enables better resource planning to support core RDK platforms. Furthermore, the RDK video release aligns with SoC, OEM, and App releases, fostering a more cohesive and efficient ecosystem. The first annual release is RDK6 and its release notes can be accessed from here \u00a0.</p> <p></p>"},{"location":"architecture/architecture/#architecture-details","title":"Architecture Details","text":"<p>Below is an illustrative representation of the RDK Video software stack, depicting the various components and their interactions.</p> <p></p> <p>At its core, RDK consists of five main stack levels, each serving a specific purpose in the overall architecture. These levels are as follows:</p>"},{"location":"architecture/architecture/#applications","title":"Applications","text":"<p>The Application Layer primarily focuses on the end-user experience. This layer contains applications that provide various services, content, and features to the users. While the RDK ecosystem is continuously evolving, supported applications typically include popular OTT services like Netflix, Amazon Prime Video, and YouTube, alongside native broadcaster applications and other services.</p>"},{"location":"architecture/architecture/#application-platform","title":"Application Platform","text":"<p>The Application Platform Layer in the RDK ecosystem offers essential tools for developers to create applications. It includes components like a UI framework , HTML5 rendering engine, and a JavaScript runtime . Acting as middleware, this layer facilitates communication between applications and core RDK services. In the RDK Video framework, Firebolt\u00ae handles UI rendering and user input, enabling extensive customization. Lightning\u2122 , an open-source JavaScript platform, manages the application lifecycle and integrates components using WebGL for rendering. Together, Firebolt\u00ae and Lightning\u2122 form a robust foundation for seamless and efficient application development in the RDK Video ecosystem.</p> <p>Firebolt \u00ae 1.0(Ripple) - Firebolt\u00ae 1.0 (Ripple) streamlines RDK app integration with standardized rules. Ripple, its open-source Rust-based Application gateway, facilitates dynamic extensions and serves as a Firebolt\u00ae Gateway. RDK 6 is Firebolt\u00ae 1.0-certified, with a comprehensive test suite for compliance.</p> <p>Security - The Application Platform Layer ensures robust security with Dobby-managed containerization , leveraging Linux kernel features for process isolation. Downloadable Application Containers (DAC) enable secure running of binary applications on STBs without modification, ensuring compatibility across RDK 6 devices. Access Control is enforced through AppArmor , a proactive Linux security system. RDKM's open-sourced AppArmor profile generator tool for RDK 6 provides fine-grained control over process resources, contributing to a secure environment.</p>"},{"location":"architecture/architecture/#middleware","title":"Middleware","text":"<p>Serving as a vital bridge between the Application Platform Layer and the hardware(HAL), the RDK Middleware Layer incorporates essential components that are pivotal for the seamless operation of the RDK platform. Core to this layer are RDK services , providing JSON-RPC services for interactive applications. In the realm of security, iCrypto handles critical cryptographic operations, ensuring secure communication and data protection. Rialto offers a secure solution for AV pipelines in containerized applications, and the Window Manager orchestrates GUI layout. Device management enables streamlined operations in RDK deployments, including bulk operations and firmware downloads. XCONF integration revolutionizes code downloads for a smoother deployment experience. Log uploads aid comprehensive debugging, offering insights into system performance. RDK Feature Control (RFC) enables dynamic feature management for enhanced flexibility. Telemetry systematically collects essential data insights, while WebPA ensures secure communication between cloud servers and RDK devices. The Media Player, crucial for local rendering devices, manages various pipeline functions, supporting IP and QAM playback. The Open Content Decryption Module(OCDM) enforces Digital Rights Management (DRM) policies. Together with other RDK elements, these components ensure the efficient and secure functioning of the RDK platform.</p>"},{"location":"architecture/architecture/#hal","title":"HAL","text":"<p>In the RDK video stack, the HAL Layer(Hardware Abstraction Layer) plays a vital role in facilitating communication between the video application software and hardware components like the GPU, video encoding/decoding hardware, and audio devices. It provides a standardized framework for functions, data structures, and protocols, enabling efficient hardware resource utilization. The HAL layer manages hardware initialization , memory allocation , input/output operations , and hardware-specific events , shielding software developers from hardware complexities and allowing them to prioritize user experience and functionality.</p> <p>RDK provides a set of HAL APIs that abstract the platform from RDK. Vendors need to implement the HAL APIs to meet the HAL Specifications. With the help of the HAL API Specification for different RDK Components, vendors can successfully port RDK to their platform. Depending on the device profile ( IP STB , IP TV , Hybrid STB etc. ), vendors may choose the relevant components and perform the port by implementing the HAL layer. Detailed information about vendor porting guide will be available soon.</p>"},{"location":"architecture/architecture/#soc","title":"SOC","text":"<p>The System on Chip (SOC) Layer forms the foundational interface between hardware components, ensuring system security and reliability. It incorporates various crucial elements such as DRM Libraries , which manages digital rights and secure content delivery to prevent unauthorized access and distribution. Trusted Applications (Apps TA) guarantee the secure execution of sensitive operations and protect critical data from unauthorized access. The Secure Store oversees the storage of DRM keys and Apps triplets, maintaining the confidentiality and integrity of vital data. Additionally, MFR Libraries manage hardware functionality, providing access to specific hardware features and capabilities, thereby contributing to the overall security and functionality of the system.</p>"},{"location":"architecture/architecture/#application-scenario","title":"Application Scenario","text":"<p>Consider the use case of a user accessing a streaming application like Youtube on an RDK Video-supported device. The user interacts with the application through the Application Layer, selecting content and initiating playback. The Application Platform Layer, utilizing the Firebolt \u00ae and Lightning\u2122 frameworks, manages the user interface and application lifecycle. The RDK Layer ensures seamless communication between the application and the hardware, managing services, cryptographic operations, inter-component communication, window management, and content decryption through OpenCDM. The RDK HAL Layer then utilizes the Gstreamer media pipeline to decode and render the video content, ensuring a smooth and high-quality viewing experience. Finally, the SOC Layer provides a secure environment for the entire system, safeguarding the hardware, managing DRM policies, and securing sensitive data, ensuring a secure and reliable video streaming experience for the user.</p>"},{"location":"architecture/architecture/#useful-links","title":"Useful Links","text":"<p>RDK Video:</p> <p>You can find an overview of the RDK Video platform, detailing its key features and functionalities at\u00a0 RDK Video Documentation</p> <p>Application Development:</p> <p>Developers interested in RDK application development using Firebolt \u00ae can refer Firebolt\u00ae and</p> <p>Developers interested in RDK application development using Lightning\u2122 can refer Lightning\u2122 Framework</p> <p>Security:</p> <p>To understand the security features in the RDK, please refer RDK Security .</p>"},{"location":"device-management/device-management/","title":"Device Management","text":"<p>Remote management of CPE devices, including monitoring, configuring, updating, and maintaining devices plays a crucial role in ensuring the smooth operation of connected devices, optimizing performance, and enhancing security and is critically important for supporting large-scale deployments. The significance lies in its ability to horizontally scale across these profiles, allowing for the efficient sharing of the same code. This streamlined approach facilitates controlled bulk operations and data retrievals, essential for managing diverse devices at scale. The functionality extends to enabling or disabling features dynamically and facilitating firmware (code) downloads. Moreover, Device Management plays a crucial role in retrieving field matrices, ensuring a comprehensive and organized approach to overseeing and controlling devices within the specified frameworks.</p> <p>The below diagram depicts how device management is horizontally scaled between different RDK profiles and how the device management fits in RDK.</p> <p></p>"},{"location":"device-management/device-management/#device-management-capabilities","title":"Device Management capabilities","text":"<p>Different device management capabilities are shared across the different profiles. The key device management capabilities are:</p>"},{"location":"device-management/device-management/#xconfdcm","title":"Xconf/DCM","text":"<p>XCONF/DCM is a pivotal device management service that enables streamlined code download in set-top-boxes (STBs), providing essential information on firmware version, download source, and download protocol. It overcomes limitations of traditional code downloads by employing the eSTB interface for code download.</p>"},{"location":"device-management/device-management/#log-upload","title":"Log Upload","text":"<p>Log Upload is an integral component in RDK deployments, allowing for debugging and maintenance. STBs store logs for a limited period, aiding in troubleshooting, field matrices, and problem urgency assessment. Controlled log uploads can be configured based on device maturity and occur at regular intervals.</p>"},{"location":"device-management/device-management/#rdk-feature-controlrfc","title":"RDK Feature Control(RFC)","text":"<p>RDK Feature Control (RFC) addresses challenges in feature deployment and rollback procedures by providing a secure channel for delivering runtime configurations. It enables quicker feature rollouts, dynamic configurations, and control over feature enable/disable states without relying on firmware reversion.</p>"},{"location":"device-management/device-management/#telemetry","title":"Telemetry","text":"<p>RDK Telemetry represents an improvement in data transfer mechanisms, moving beyond log file bundling. It involves periodic transmission of telemetry data from every RDK device and utilizes logs, system status information, and SNMP commands to enhance data transmission efficiency.</p>"},{"location":"device-management/device-management/#webpa","title":"WebPA","text":"<p>WebPA (Web Protocol Adapter) serves as a secure web protocol messaging system for bi-directional communication between cloud servers and RDK devices. It offers read/write access to device management parameters, prioritizing security and performance, and replaces traditional methods like TR-69 or SNMP.</p> <p>In summary, RDK Device Management encompasses XCONF/DCM, Log Upload, Telemetry, RFC, and WebPA as comprehensive tools for efficient management and monitoring of RDK-based devices, ensuring optimal performance, security, and user experience.</p>"},{"location":"device-management/device-management/#additional-resources","title":"Additional Resources","text":"<p>To know more about device management functionalities and how it is achieved, please refer below links:</p> <ul> <li>Code Download (Xconf, DCM)     Xconf/DCM</li> <li>Log Upload</li> <li>Telemetry</li> <li>RDK Feature Control - RFC</li> </ul>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/","title":"RDK Camera Architecture","text":"<p>RDK-C provides a common set of software components to build IP-based video cameras with standard functions, such as live streaming, continuous video recording and Normal Thumbnail. RDK accelerates the deployment of next-gen IP camera products and services, while simplifying the customization of the application and user experience.</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#architecture-details","title":"Architecture Details","text":"<p>Below is an illustrative representation of the RDK Camera software stack, depicting the various components and their interactions.</p> <p></p> <p>At its core, RDK Camera consists of five main stack levels, each serving a specific purpose in the overall architecture. These levels are as follows:</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#application","title":"Application","text":"<p>VLC and KVS applications are sophisticated blends of continuous video recording (CVR). VLC is capable of ingesting a single live H.264 video stream from RMS. On the other hand, KVS (Kinesis Video Streams) offers CVR support. With KVS, you only pay for what you upload from the CVR application.</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#application-platform","title":"Application Platform","text":"<p>The application platform is a robust system incorporating RMS , CVR , and WEBRTC technologies. RMS provides network live streaming. The incorporation of CVR allows continuous video recording, providing users with uninterrupted access to recorded content. Additionally, the platform leverages WEBRTC for high-quality real-time communication over the web. Thumbnail previews are integrated, offering users a quick and convenient way to navigate and preview content, enhancing the overall user experience.</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#rdk-middleware","title":"RDK Middleware","text":"<p>The RDK middleware is a powerful framework that integrates various functionalities, including libcamera for camera support, OpenCV for computer vision capabilities, PipeWire for multimedia handling, WirePlumber for audio management, and RDK services for comprehensive service integration. Libcamera ensures efficient camera functionality within the middleware, while OpenCV enhances computer vision capabilities for applications. PipeWire facilitates seamless multimedia handling, offering a versatile solution for audio and video processing. WirePlumber ensures effective audio management within the middleware. RDK services provide a comprehensive suite of services, creating a robust and extensible middleware framework with broad functionality and support for diverse applications.</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#rdk-hal","title":"RDK HAL","text":"<p>The RDK Hardware Abstraction Layer (HAL) is a crucial component that interfaces with hardware-specific functionalities in the RDK environment. RDK HAL leverages the libcamera pipeline for efficient camera integration, enabling streamlined communication between the hardware and higher-level software components. Additionally, it utilizes libv4l2, providing a standardized interface for video capture devices. The combination of RDK HAL, the libcamera pipeline, and libv4l2 ensures seamless integration and optimal utilization of hardware resources, enhancing the overall performance and functionality of RDK-based systems</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#soc","title":"SOC","text":"<p>The System-on-Chip (SoC) functionalities encompass a range of capabilities crucial for system operation. The Linux kernel serves as the core operating system, providing a stable foundation for software applications. SoC functionalities include camera and video drivers that facilitate communication between the hardware and software layers, enabling the utilization of imaging devices.</p> <p>Moreover, Image Signal Processing (ISP) plays a pivotal role in enhancing and refining image quality. Integrated into the SoC, ISP manages tasks such as color correction, noise reduction, and other image processing operations to optimize the output from imaging sensors.</p> <p>In summary, the SoC functionalities involve the orchestration of the Linux kernel, camera and video drivers, and ISP, collectively ensuring efficient communication with hardware components and enabling advanced image processing capabilities.</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#application-scenario","title":"Application Scenario","text":"<p>In this application scenario, the user aims to achieve smooth playback of live streaming content using the VLC media player, which operates at the application layer. To accomplish this, a multi-layered architecture is employed. At the application platform layer, the RMS (RDK Media Streamer) component takes charge of managing the streaming process. Within the RDK (Reference Design Kit) ecosystem, RMS utilizes Pipewire, a middleware layer that facilitates the streaming functionality. Pipewire, in turn, relies on the capabilities of libv4l2 at the RDK HAL (Hardware Abstraction Layer) level. At the HAL layer, the libv4l2 component interfaces with the camera driver embedded in the SOC. This integrated system ensures a seamless and coordinated flow of live streaming content, starting from the hardware level camera driver and reaching the VLC media player at the application layer. Throughout this process, RMS acts as a crucial intermediary component within the RDK framework.</p>"},{"location":"rdk-camera-architecture/rdk-camera-architecture/#useful-links","title":"Useful Links","text":"<ul> <li>To know about the\u00a0     available RDK-C components and its source code repo paths refer     Components List</li> <li>For     bringing up and validation of Continuous video recording functionality in RPI refer     CVR</li> <li>For video playback with WebRTC follow     WebRTC</li> <li>For     bringing up and validation of Normal Thumbnail functionality in RPI refer     Thumbnail</li> <li>To know more about libcamera for camera support refer     Libcamera</li> <li>To know more about pipeWire, how it handles multimedia refer     PipeWire</li> <li>To know about RDK-C RPI build guides refer     RDK-C RPI</li> </ul>"}]}